// Prisma Schema for Marketing Agency CRM

generator client {
  provider = "prisma-client-js"
}

// For development (SQLite):
// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

// For production (PostgreSQL - Vercel/Server):
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User & Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          String    // admin, project-manager, team-member, client
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  createdProjects     Project[]  @relation("ProjectCreator")
  managedProjects     Project[]  @relation("ProjectManager")
  createdTasks        Task[]     @relation("TaskCreator")
  assignedTasks       Task[]     @relation("TaskAssignee")
  createdCampaigns    Campaign[] @relation("CampaignCreator")
  responsibleCampaigns Campaign[] @relation("CampaignResponsible")
  createdContent      Content[]  @relation("ContentCreator")
  assignedContent     Content[]  @relation("ContentAssignee")
  comments            Comment[]
  notifications       Notification[]
  
  @@map("users")
}

// Client Management
model Client {
  id             String    @id @default(cuid())
  name           String
  contactPerson  String
  phone          String
  email          String
  company        String
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  projects       Project[]
  
  @@map("clients")
}

// Project Management
model Project {
  id              String    @id @default(cuid())
  name            String
  description     String
  startDate       DateTime
  endDate         DateTime
  status          String    // planned, in-progress, completed, on-hold
  progress        Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Foreign Keys
  clientId        String
  projectManagerId String
  createdById     String
  
  // Relations
  client          Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  projectManager  User      @relation("ProjectManager", fields: [projectManagerId], references: [id])
  createdBy       User      @relation("ProjectCreator", fields: [createdById], references: [id])
  tasks           Task[]
  campaigns       Campaign[]
  content         Content[]
  files           ProjectFile[]
  
  @@map("projects")
}

// Project Files
model ProjectFile {
  id          String    @id @default(cuid())
  name        String
  url         String
  size        Int?
  mimeType    String?
  uploadedAt  DateTime  @default(now())
  uploadedById String
  projectId   String
  
  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_files")
}

// Task Management
model Task {
  id              String    @id @default(cuid())
  title           String
  description     String
  type            String    // content-writing, graphic-design, video-editing, ads-setup, seo, reporting, general
  status          String    // to-do, in-progress, review, done, delayed
  priority        String    // low, medium, high, urgent
  startDate       DateTime
  dueDate         DateTime
  completionDate  DateTime?
  progress        Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Foreign Keys
  projectId       String?
  assignedToId    String
  createdById     String
  
  // Relations
  project         Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  assignedTo      User       @relation("TaskAssignee", fields: [assignedToId], references: [id])
  createdBy       User       @relation("TaskCreator", fields: [createdById], references: [id])
  subtasks        Subtask[]
  attachments     Attachment[]
  comments        Comment[]
  changeLogs      ChangeLog[]
  
  @@map("tasks")
}

// Subtasks
model Subtask {
  id          String    @id @default(cuid())
  title       String
  completed   Boolean   @default(false)
  taskId      String
  createdAt   DateTime  @default(now())
  
  // Relations
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("subtasks")
}

// Change Log
model ChangeLog {
  id          String    @id @default(cuid())
  field       String
  oldValue    String
  newValue    String
  changedBy   String
  changedAt   DateTime  @default(now())
  taskId      String
  
  // Relations
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("change_logs")
}

// Campaign Management
model Campaign {
  id              String    @id @default(cuid())
  name            String
  type            String    // facebook-ads, instagram-ads, google-ads, linkedin-ads, email-marketing, offline-campaign
  objective       String    // awareness, engagement, leads, sales
  startDate       DateTime
  endDate         DateTime
  budget          Float
  status          String    // planned, running, paused, completed
  progress        Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Foreign Keys
  projectId          String
  responsiblePersonId String
  createdById        String
  
  // Relations
  project            Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  responsiblePerson  User         @relation("CampaignResponsible", fields: [responsiblePersonId], references: [id])
  createdBy          User         @relation("CampaignCreator", fields: [createdById], references: [id])
  kpis               CampaignKPI[]
  attachments        Attachment[]
  
  @@map("campaigns")
}

// Campaign KPIs
model CampaignKPI {
  id          String    @id @default(cuid())
  name        String
  value       String
  campaignId  String
  createdAt   DateTime  @default(now())
  
  // Relations
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@map("campaign_kpis")
}

// Content Planning
model Content {
  id            String    @id @default(cuid())
  title         String
  contentType   String    // post, video, article, graphic, email, other
  status        String    // idea, in-progress, review, approved, scheduled, published
  priority      String    // low, medium, high, urgent
  startDate     DateTime
  dueDate       DateTime
  publishDate   DateTime?
  progress      Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Foreign Keys
  projectId     String?
  campaignId    String?
  assignedToId  String
  createdById   String
  
  // Relations
  project       Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)
  assignedTo    User         @relation("ContentAssignee", fields: [assignedToId], references: [id])
  createdBy     User         @relation("ContentCreator", fields: [createdById], references: [id])
  attachments   Attachment[]
  comments      Comment[]
  
  @@map("content")
}

// Attachments (for tasks, campaigns, content)
model Attachment {
  id          String    @id @default(cuid())
  name        String
  url         String
  size        Int?
  mimeType    String?
  uploadedAt  DateTime  @default(now())
  
  // Foreign Keys (optional - at least one must be set)
  taskId      String?
  campaignId  String?
  contentId   String?
  
  // Relations
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  campaign    Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  content     Content?  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@map("attachments")
}

// Comments (for tasks and content)
model Comment {
  id          String    @id @default(cuid())
  text        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Foreign Keys
  authorId    String
  taskId      String?
  contentId   String?
  parentId    String?
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  content     Content?  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")
  
  @@map("comments")
}

// Notifications
model Notification {
  id          String    @id @default(cuid())
  type        String    // task-created, status-update, deadline, comment, assignment
  title       String
  message     String
  link        String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  // Foreign Keys
  userId      String
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

